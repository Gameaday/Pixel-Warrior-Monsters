name: Release Pipeline - Google Play Store

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  security-events: write
  actions: read
  pages: write
  id-token: write

jobs:
  security-checks:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Upload SARIF results (if present)
      # Using GitHub's SARIF upload action; replace sarif-file path if the scanner writes elsewhere
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: security-results.sarif
        
    - name: Check for secrets in code
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  performance-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run performance benchmarks
      run: ./gradlew connectedBenchmarkAndroidTest || echo "Benchmark tests not yet implemented"
      
    - name: Analyze APK size
      run: |
        ./gradlew assembleRelease
        apt-get update && apt-get install -y aapt
        aapt dump badging app/build/outputs/apk/release/*.apk | grep package

  build-release:
    needs: [security-checks, performance-tests]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    # Note: For actual Play Store deployment, you would need to add:
    # - Signing configuration with release keystore
    # - Google Play Console upload action
    # - Proper versioning based on git tag
      
    - name: Build signed release APK
      run: |
        # This would use the release keystore for actual deployment
        ./gradlew assembleRelease
        
    - name: Generate release bundle
      run: ./gradlew bundleRelease
      
    - name: Upload release APK
      uses: actions/upload-artifact@v4
      with:
        name: release-apk-signed
        path: app/build/outputs/apk/release/*.apk
        
    - name: Upload release AAB
      uses: actions/upload-artifact@v4
      with:
        name: release-aab
        path: app/build/outputs/bundle/release/*.aab

    - name: Prepare release pages folder
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        OUT_DIR=./pages_output/releases/${TAG_NAME}
        mkdir -p "$OUT_DIR"
        cp -v app/build/outputs/apk/release/*.apk "$OUT_DIR/" || true
        cp -v app/build/outputs/bundle/release/*.aab "$OUT_DIR/" || true
        if [ -f app/build/outputs/mapping/release/mapping.txt ]; then
          cp app/build/outputs/mapping/release/mapping.txt "$OUT_DIR/"
        fi
        echo "# Release ${TAG_NAME}" > "$OUT_DIR/README.md"
        ls -la "$OUT_DIR"

    - name: Configure GitHub Pages
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/configure-pages@v3

    - name: Upload releases as Pages artifact
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-pages-artifact@v1
      with:
        path: ./pages_output/releases

    - name: Deploy releases Pages artifact
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/deploy-pages@v1
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        draft: false
        prerelease: false
        # Attach built APK/AAB and mapping file (if present) to the release
        files: |
          app/build/outputs/apk/release/*.apk
          app/build/outputs/bundle/release/*.aab
          app/build/outputs/mapping/release/mapping.txt
        body: |
          ## Release Notes
          
          This release includes:
          - All unit tests passing
          - Performance benchmarks met
          - Security validation completed
          - Ready for Google Play Store submission
          
          ### Download
          - Release APK and AAB are attached as release assets.

  # Placeholder for Google Play Store deployment
  # This would require additional setup:
  # - Google Play Console service account
  # - Upload key configuration
  # - Store listing management
  deploy-to-play-store:
    needs: build-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Deploy to Play Store (Internal Track)
      run: |
        echo "Play Store deployment would happen here"
        echo "Requires: google-play-service-account.json"
        echo "Requires: upload key configuration" 
        echo "Would use: r0adkll/upload-google-play@v1.0.15"