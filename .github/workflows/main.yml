name: CI/CD Pipeline - Testing and Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run lint checks
      run: ./gradlew lint
      continue-on-error: false
      
    - name: Run unit tests
      run: ./gradlew test
      
    - name: Generate test coverage report
      run: ./gradlew jacocoTestReport
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          app/build/reports/tests/
          app/build/reports/coverage/
          
    - name: Comment test coverage on PR
      if: github.event_name == 'pull_request'
      uses: madrapps/jacoco-report@v1.3
      with:
        paths: app/build/reports/jacoco/test/jacocoTestReport.xml
        token: ${{ secrets.GITHUB_TOKEN }}
        min-coverage-overall: 80
        min-coverage-changed-files: 75

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17  
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build debug APK
      run: ./gradlew assembleDebug
      
    - name: Build release APK and AAB
      run: ./gradlew assembleRelease bundleRelease
      
    - name: Upload debug APK (Development Build)
      uses: actions/upload-artifact@v4
      with:
        name: development-apk
        path: app/build/outputs/apk/debug/*.apk
        retention-days: 90

    - name: Publish development APK to GitHub Pages
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
      env:
        PAGES_BRANCH: gh-pages
      run: |
        # Create a pages_output folder in the workspace and copy only APK/AAB files we want to publish
        PAGES_OUT=./pages_output
        mkdir -p "$PAGES_OUT/dev"
        cp -v app/build/outputs/apk/debug/*.apk "$PAGES_OUT/dev/" || true
        # If any AAB exists for debug builds, include them as well
        cp -v app/build/outputs/bundle/debug/*.aab "$PAGES_OUT/dev/" || true
        ls -la "$PAGES_OUT/dev"

    - name: Configure GitHub Pages
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v3

    - name: Upload development artifacts as Pages artifact
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v1
      with:
        path: ./pages_output/dev

    - name: Deploy development artifact to Pages
      if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
      uses: actions/deploy-pages@v1
        
    - name: Prepare production bundle
      run: |
        mkdir -p production-bundle
        cp app/build/outputs/apk/release/*.apk production-bundle/
        cp app/build/outputs/bundle/release/*.aab production-bundle/
        if [ -f app/build/outputs/mapping/release/mapping.txt ]; then
          cp app/build/outputs/mapping/release/mapping.txt production-bundle/
        fi
        echo "# Production Build - Ready for Play Store" > production-bundle/README.md
        echo "" >> production-bundle/README.md
        echo "## Contents" >> production-bundle/README.md
        echo "- **app-release.apk**: Release APK for sideloading" >> production-bundle/README.md
        echo "- **app-release.aab**: Android App Bundle for Google Play Store" >> production-bundle/README.md
        echo "- **mapping.txt**: ProGuard/R8 mapping file (if available)" >> production-bundle/README.md
        echo "" >> production-bundle/README.md
        echo "## Installation" >> production-bundle/README.md
        echo "Upload the .aab file to Google Play Console for distribution." >> production-bundle/README.md
        echo "Or install the .apk file directly on devices for testing." >> production-bundle/README.md
        
    - name: Upload production bundle (Play Store Ready)
      uses: actions/upload-artifact@v4
      with:
        name: production-bundle
        path: production-bundle/
        retention-days: 180

    - name: Publish production bundle to GitHub Pages (latest)
      if: github.ref == 'refs/heads/main'
      run: |
        OUT_DIR=./pages_output/releases/latest
        mkdir -p "$OUT_DIR"
        cp -r production-bundle/* "$OUT_DIR/" || true
        ls -la "$OUT_DIR"

    - name: Upload production bundle as Pages artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v1
      with:
        path: ./pages_output/releases

    - name: Deploy production Pages artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/deploy-pages@v1

  integration-tests:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Enable KVM group permissions
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
      
    - name: Run instrumentation tests on emulator
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        arch: x86_64
        target: default
        profile: pixel_2
        ram-size: 2048M
        heap-size: 512M
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        emulator-boot-timeout: 600
        script: ./gradlew connectedAndroidTest
      continue-on-error: true
        
    - name: Upload instrumentation test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: instrumentation-test-results
        path: app/build/reports/androidTests/